# Engy-5050 Problem 1: Poisson 1D FEM Neutron Diffusion Equation
# UMass Lowell Nuclear Chemical Engineering
# Anthony Bowers

# Parameters
xmin = 0.00000e+00
xmax = 3.44

diff_coeff =1.83180150273944
diff_coeff_2= 1.203755273228775

sigma_s12 = 0.03560287029288702




[Problem]
  type = EigenProblem
  coord_type = RSPHERICAL
[]

[Mesh]
  [1d]
    type = GeneratedMeshGenerator
    dim = 1
    xmin = ${replace xmin}
    xmax = ${replace xmax}
    nx = 30
	#45
	#30
    elem_type = edge3
  []
[]

[Variables]
  [u1]
    order = second
    family = lagrange
    
  []
  [u2]
    order = second
    family = lagrange

  []
[]
[AuxVariables]
  
  [diffFlux_u1]
    order = first
    family = MONOMIAL
  []
  
  [diffFlux_u2]
  order = first
  family = MONOMIAL
  []
[]

[AuxKernels]
[diffusion-flux-u1]
    execute_on = timestep_end
    type = DiffusionFluxComponent
    field = u1
    diffCoeff = ${replace diff_coeff}
    component = x
    variable = diffFlux_u1    # produced quantity
	
  []
  [diffusion-flux-u2]
    execute_on = timestep_end
    type = DiffusionFluxComponent
    field = u2
    diffCoeff = ${replace diff_coeff_2}
    component = x
    variable = diffFlux_u2    # produced quantity
	
  []
  
  
  []
[Kernels]

  [diffusion-term-1]
    type = DiffusionTerm
    variable = u1     # produced quantity
    diffCoeff = ${replace diff_coeff}
  []
  [diffusion-term-2]
    type = DiffusionTerm
    variable = u2     # produced quantity
    diffCoeff = ${replace diff_coeff_2}
  []
  
  [eigenvalue-term-1]
    type = CoefReaction
    variable = u1     # produced quantity
    extra_vector_tags='eigen'
	coefficient = -1.0
  []
    [eigenvalue-term-2]
    type = CoefReaction
    variable = u2    # produced quantity
    extra_vector_tags='eigen'
	coefficient = -1.0
  []

    [source-term-2]
    type = SourceTermG2
    variable = u2
    coupledGroupA = u1
    sigma_sa = ${replace sigma_s12}
    coupledGroupB = u2
  []
  [source-term-1]
    type = SourceTermG1
    variable = u1
    
    sigma_sa = ${replace sigma_s12}
  
  []

[]

[BCs]
  [entry-u1]
    type = NeumannBC
	
    variable = u1
    boundary = left
    value = 0
  []
  
  [exit-u1]
      type = PostprocessorNeumannBC_Albedo
    variable = u1
    boundary = right
    postprocessor = right_u1
	  execute_on = linear
  []
  
  [entry-u2]
    type = NeumannBC
    variable = u2
    boundary = left
    value = 0
  []
  [exit-u2]
    type = PostprocessorNeumannBC_Albedo
    variable = u2
    boundary = right
    postprocessor = right_u2
    execute_on = linear
  []
  
   
 

[]



[Executioner]
  type = Eigenvalue
   solve_type = 'PJFNK'
  petsc_options_iname = '-pc_type -pc_hypre_type'
  petsc_options_value = 'hypre boomeramg'
  nl_abs_tol = 1e-8
  nl_rel_tol = 1e-8
  
   # Postprocessor value to normalize
  normalization =u-normalized 
  # Value to set normilization to
 
  
 
  
[]

[VectorPostprocessors]
  [eigenvalue-data]
    type = Eigenvalues
    execute_on = 'timestep_end final'
  []
 
  [x-data]
    type = LineValueSampler
    execute_on = 'timestep_end final'
    variable = 'u1 u2'    # output data
    start_point = '${replace xmin} 0 0'
    end_point = '${replace xmax} 0 0'
    num_points = 20
    sort_by = id
  []
[]

[Postprocessors]
  #[unorm]
   # type = ElementIntegralVariablePostprocessor
    #variable ='u1 u2'
    #execute_on = linear
 #[]
 
 
  [right_u2]
    type = PointValue
    point = '${replace xmax} 0 0'
    variable =diffFlux_u2
  
  []
  [right_u1]
    type = PointValue
    point = '${replace xmax} 0 0'
    variable =diffFlux_u1
  
  []
  


   [u-normalized]
    type = ElementExtremeValue
    variable = u1
    value_type = max
	execute_on=linear
  []
   [u-normalized2]
    type = ElementExtremeValue
    variable = u2
    value_type = max
	execute_on=linear
  []

 
[]

[Outputs]
  console = true
  csv= true

 
[]
